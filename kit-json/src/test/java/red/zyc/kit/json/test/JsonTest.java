/*
 * Copyright 2024 allurx
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package red.zyc.kit.json.test;

import org.junit.jupiter.api.Test;
import red.zyc.kit.base.reflection.TypeToken;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static red.zyc.kit.json.JsonOperator.GSON_OPERATOR;
import static red.zyc.kit.json.JsonOperator.JACKSON_OPERATOR;

/**
 * Unit tests for JSON conversion, copying, and comparison using
 * both GSON and Jackson JSON operators.
 * <p>
 * These tests verify the correct serialization and deserialization of a list of Person objects,
 * as well as the ability to compare JSON strings and copy object properties.
 * </p>
 *
 * @author allurx
 */
public class JsonTest {

    /**
     * A simple record representing a Person with name, age, phone number, and creation time.
     */
    record Person(String name, int age, String phoneNumber, LocalDateTime createdTime) {
    }

    private static final List<Person> PERSONS =
            Stream.of(new Person("allurx", 18, "12345678900", LocalDateTime.of(2021, 1, 15, 12, 0, 0)),
                            new Person("allurx1", 20, "12345678901", LocalDateTime.of(2021, 1, 15, 12, 0, 0)))
                    .collect(Collectors.toList());

    private static final TypeToken<List<Person>> TYPE_TOKEN = new TypeToken<List<Person>>() {
    };

    /**
     * Tests JSON serialization and deserialization using Jackson.
     */
    @Test
    void testJacksonConversion() {
        String json = JACKSON_OPERATOR.toJsonString(PERSONS);
        assertEquals(PERSONS, JACKSON_OPERATOR.fromJsonString(json, TYPE_TOKEN));
    }

    /**
     * Tests property copying using Jackson.
     */
    @Test
    void testJacksonCopy() {
        List<Person> copy = JACKSON_OPERATOR.copyProperties(PERSONS, TYPE_TOKEN);
        assertEquals(PERSONS, copy);
    }

    /**
     * Compares JSON strings generated by GSON and Jackson to ensure consistency.
     */
    @Test
    void testJacksonCompare() {
        assertTrue(JACKSON_OPERATOR.compare(GSON_OPERATOR.toJsonString(PERSONS), JACKSON_OPERATOR.toJsonString(PERSONS)));
    }

    /**
     * Tests JSON serialization and deserialization using GSON.
     */
    @Test
    void testGsonConversion() {
        String json = GSON_OPERATOR.toJsonString(PERSONS);
        assertEquals(PERSONS, GSON_OPERATOR.fromJsonString(json, TYPE_TOKEN));
    }

    /**
     * Tests property copying using GSON.
     */
    @Test
    void testGsonCopy() {
        List<Person> copy = GSON_OPERATOR.copyProperties(PERSONS, TYPE_TOKEN);
        assertEquals(PERSONS, copy);
    }

    /**
     * Compares JSON strings generated by GSON and Jackson to ensure consistency.
     */
    @Test
    void testGsonCompare() {
        assertTrue(GSON_OPERATOR.compare(GSON_OPERATOR.toJsonString(PERSONS), JACKSON_OPERATOR.toJsonString(PERSONS)));
    }
}
